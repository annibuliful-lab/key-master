generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id              String           @id @default(uuid())
  permission      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  deletedAt       DateTime?
  rolePermissions RolePermission[]
}

model Role {
  id               String            @id @default(uuid())
  projectId        String
  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  deletedAt        DateTime?
  rolePermissions  RolePermission[]
  projectRoleUsers ProjectRoleUser[]

  @@unique([projectId, role])
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdBy    String
  updatedBy    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  deletedAt    DateTime?

  @@unique([roleId, permissionId])
}

model Project {
  id                   String                @id @default(uuid())
  name                 String
  ownerId              String
  owner                User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt
  deletedAt            DateTime?
  keyManagments        KeyManagment[]
  roles                Role[]
  auditLogs            AuditLog[]
  projectRoleUsers     ProjectRoleUser[]
  projectOrganizations ProjectOrganization[]

  @@unique([name, ownerId])
}

model User {
  id                String             @id @default(uuid())
  username          String
  password          String
  fullname          String
  projects          Project[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  deletedAt         DateTime?
  projectRoleUsers  ProjectRoleUser[]
  organizationUsers OrganizationUser[]

  @@unique([username])
}

model ProjectRoleUser {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId    String
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@unique([roleId, userId])
}

model ProjectOrganization {
  id                         String                      @id @default(uuid())
  projectId                  String
  project                    Project                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name                       String
  active                     Boolean                     @default(true)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @default(now()) @updatedAt
  deletedAt                  DateTime?
  organizationKeyManagements OrganizationKeyManagement[]
  organizationUsers          OrganizationUser[]

  @@unique([projectId, name])
}

model OrganizationUser {
  id             String              @id @default(uuid())
  organizationId String
  organization   ProjectOrganization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  active         Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @default(now()) @updatedAt
  deletedAt      DateTime?

  @@unique([organizationId, userId])
}

model OrganizationKeyManagement {
  id                    String              @id @default(uuid())
  projectOrganizationId String
  projectOrganization   ProjectOrganization @relation(fields: [projectOrganizationId], references: [id])
  keyManagementId       String
  keyManagement         KeyManagment        @relation(fields: [keyManagementId], references: [id], onDelete: Cascade)
  createdBy             String
  updatedBy             String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @default(now()) @updatedAt
  deletedAt             DateTime?

  @@unique([projectOrganizationId, keyManagementId])
}

model KeyManagment {
  id                         String                      @id @default(uuid())
  projectId                  String
  project                    Project                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name                       String
  pin                        String?
  masterKey                  String
  createdBy                  String
  updatedBy                  String
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @default(now()) @updatedAt
  deletedAt                  DateTime?
  organizationKeyManagements OrganizationKeyManagement[]

  @@unique([projectId, name])
}

enum AuditType {
  CREATE
  UPDATE
  DELETE
}

enum AuditLogStatus {
  ERROR
  WARN
  SUCCESS
  INFO
}

model AuditLog {
  id          String         @id @default(uuid())
  projectId   String
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  serviceName String
  type        AuditType
  status      AuditLogStatus
  message     String
  data        Json?
  createdBy   String
  updatedBy   String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt

  @@index([projectId])
  @@index([serviceName, type])
}
