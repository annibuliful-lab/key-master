// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id              String           @id @default(uuid())
  permission      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  deletedAt       DateTime?
  rolePermissions RolePermission[]
}

model Role {
  id              String           @id @default(uuid())
  projectId       String
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  deletedAt       DateTime?
  rolePermissions RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdBy    String
  updatedBy    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}

model Project {
  id            String         @id @default(uuid())
  name          String
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  deletedAt     DateTime?
  keyManagments KeyManagment[]
  roles         Role[]

  @@unique([name, ownerId])
}

model User {
  id        String    @id @default(uuid())
  username  String
  password  String
  fullname  String
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@unique([username, fullname])
}

model KeyManagment {
  id        String    @id @default(uuid())
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  pin       String?
  masterKey String
  createdBy String
  updatedBy String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}
